Got you chief 👊 I see what happened — you want that **structured, step-by-step plan** again, but one that covers *both sides*:

1. **Website development (self-built, GitHub setup, deploy, etc.)**
2. **Instagram marketing (3-day teaser build-up → final reveal)**

And since you’ve already done HTML/CSS/JS basics (not pro yet, but comfortable editing), I’ll make the plan *beginner-friendly but real-world*, so you can both practice coding **and** pull off this Bugatti/Mansory-style launch.

---

## 🔥 Master Plan (Today → Launch)

We’ll split into **Website** track and **Instagram** track.
Launch target: **Tuesday Sep 2, 2025** (so today Fri → Tue = 4 days).

---

### 1. Website Development Plan

*(We’ll do it properly — your own site, no Wix)*

#### Step 1 — Set up GitHub & Project (Today, Fri)

* Install [Git](https://git-scm.com/downloads) if you don’t have it.
* Create a GitHub account (if not yet).
* In VS Code:

  ```bash
  git init
  git branch -M main
  git add .
  git commit -m "Initial commit"
  git remote add origin https://github.com/<your-username>/<repo-name>.git
  git push -u origin main
  ```
* Repo is live. This is your “source of truth.”

#### Step 2 — Code base (Sat)

* Use the **template** I gave you (hero + countdown + gallery + about + collab + contact).
* Replace text + images (your 6 liveries, hero, og preview).
* Set your **launch date** inside `LAUNCH_DATE` in the script.
* Test locally: open `index.html` in browser.

#### Step 3 — Deploy (Sun)

* Use **Netlify** (super easy + free + contact forms work).
* Steps:

  * Sign up on [Netlify](https://www.netlify.com/).
  * “New Site → From Git → Connect GitHub → Choose repo.”
  * Done. You get a free subdomain like `coastcustoms.netlify.app`.
* Check the site on phone + desktop.

#### Step 4 — Polish (Mon)

* Mobile responsive test.
* SEO: update `<meta>` tags (title, description, OG image).
* Add Instagram & email links in footer.
* (Optional) Custom domain if you want (like `coastcustoms.xyz`).

---

### 2. Instagram Teaser Plan

*(3-day drip, like Bugatti / Mansory pre-release)*

#### Sat (Aug 30) — **Teaser 1 (Mystery vibe)**

* Story & Feed: Close-up detail shot (headlight, carbon, spoiler) with text:

  * Story text: *“A new era of liveries is coming.”*
  * Feed caption: *“Coast Customs presents something new… Stay tuned.”*
* No mention of how many liveries. Just mystery.

#### Sun (Aug 31) — **Teaser 2 (Collection hint)**

* Story: silhouette image / blurred full car shot.
* Feed: Carousel of 2–3 cropped shots.
* Caption: *“6 designs. Inspired by Mansory, Bugatti, and more. Launching Sept 2.”*
* Add **Countdown sticker** in story.

#### Mon (Sep 1) — **Teaser 3 (Collab hype)**

* Story & Feed: Reveal collab with Hellcat creator.
* Caption: *“Collab preview: \[CreatorName] x Coast Customs. The Hellcat edition.”*
* This builds trust + hype from their audience.

#### Tue (Sep 2) — **Main Drop (Full launch)**

* Feed: Post carousel with hero shots of all 6 designs.
* Caption: *“The collection is live. Explore full gallery → link in bio.”*
* Story: 15s reel with cinematic shots + “LIVE NOW.”
* Collab creators post at same time.

---

### 3. Learning Support While Doing This

Since you’re still getting comfortable with HTML/CSS/JS:

* You’ll **learn by editing the template** instead of building from scratch.
* As you swap images, tweak text, and test the countdown, you’ll practice:

  * Updating `<img>` and `<div>` structure (HTML)
  * Adjusting colors, sizes, spacing (CSS)
  * Playing with countdown script (JS)
* By launch, you’ll be way more comfortable editing a *real* project.

---

## 🚀 Recap Timeline

* **Fri (Today)** → Set up GitHub, prep images, copy.
* **Sat** → Edit site content + Post Teaser 1.
* **Sun** → Deploy on Netlify + Post Teaser 2.
* **Mon** → Polish site + Post Teaser 3 (collab).
* **Tue** → Launch post, collabs go live, site traffic in.

---

Do you want me to **expand this into a “daily checklist” with exact copy-paste commands** (like Git commands, Netlify steps, Instagram caption text), so you can literally follow it like a script?


Got you chief 👊. What you’re asking me for is **a full learning roadmap** based on the exact skills you used (and still need) for this website — not just random tutorials, but structured in the **order you should learn them**, tied directly to **the F1 website project** you’ve been building.

This way you’ll **learn by doing**, not just by theory. Each section has:

* **What you need to learn**
* **Why you need it (how it connects to your site)**
* **Where to learn (resources)**

---

# 🚦 Roadmap: Learn Everything for Your F1 Website

Think of it as 8 stages — each stage builds on the previous one. Don’t rush. Master one, then move on.

---

## **Stage 1 — Core Web Foundations**

### What to Learn

* **HTML5**: tags, structure, semantic elements (`<header>`, `<nav>`, `<main>`, `<footer>`, `<section>`).
* **CSS3**: selectors, colors, fonts, box model, flexbox, grid, responsive design, animations.
* **JavaScript basics**: variables, functions, events, DOM manipulation.

### Why

* This is your **homepage, about, collaboration, contact** layouts.
* CSS handles your **transparent backgrounds, F1 leaderboard styling, animations**.
* JavaScript lets you control buttons, menus, and interactivity.

### Resources

* [CS50 Web Track (HarvardX) — Intro Weeks](https://cs50.harvard.edu/web/)
* [MDN Web Docs — HTML/CSS/JS Basics](https://developer.mozilla.org/)
* [freeCodeCamp Responsive Web Design](https://www.freecodecamp.org/learn/2022/responsive-web-design/)

---

## **Stage 2 — Version Control with Git & GitHub**

### What to Learn

* git basics: `add`, `commit`, `push`, `pull`, `branch`
* writing good commit messages
* using GitHub for collaboration

### Why

* Every time you edit the site, you’re pushing to **Netlify via GitHub**.
* Without Git, you’ll mess up your code history.

### Resources

* [CS50 Git Lecture (YouTube)](https://youtu.be/HkdAHXoRtos)
* [Git Handbook (GitHub)](https://guides.github.com/introduction/git-handbook/)

---

## **Stage 3 — JavaScript Deep Dive**

### What to Learn

* DOM: query selectors, events (`onclick`, `onchange`).
* Local storage vs server storage.
* Fetch API (`fetch()`, `async/await`).
* Modules & imports.

### Why

* Your **about.html script** that connects to Supabase.
* Your **championship.js** live admin panel logic.
* Your **fetch drivers, results, standings** all rely on this.

### Resources

* [Eloquent JavaScript (free book)](https://eloquentjavascript.net/) (focus on DOM + async chapters).
* [freeCodeCamp JavaScript Course](https://www.youtube.com/watch?v=jS4aFq5-91M)

---

## **Stage 4 — Databases & SQL**

### What to Learn

* What a database is (tables, rows, columns).
* SQL basics: `SELECT`, `INSERT`, `UPDATE`, `DELETE`.
* Joins (`INNER JOIN`, `LEFT JOIN`).
* Aggregations (`SUM`, `COUNT`, `AVG`).
* Views (like your `standings_view`).

### Why

* Your **Supabase DB** has `drivers`, `teams`, `laps`, `results`.
* You’ll use SQL for:

  * Adding drivers & teams
  * Recording race events
  * Computing standings

### Resources

* [CS50 SQL track](https://cs50.harvard.edu/x/2024/sql/)
* [W3Schools SQL Tutorial](https://www.w3schools.com/sql/)

---

## **Stage 5 — Supabase (Database + Auth + Realtime)**

### What to Learn

* Supabase Table Editor basics.
* Supabase Realtime (subscriptions).
* Using the JS client (`supabase.from().select()`, `insert()`, `update()`).
* Security rules (RLS, anon key vs service\_role key).

### Why

* This is the **backend of your F1 page**.
* Without Supabase, your buttons won’t log laps and your leaderboard won’t update.

### Resources

* [Supabase Docs — Getting Started](https://supabase.com/docs)
* [Supabase YouTube Channel](https://www.youtube.com/c/Supabase)

---

## **Stage 6 — Netlify & Serverless Functions**

### What to Learn

* What Netlify does (hosting + build + functions).
* Environment variables (`.env` files, hiding secrets).
* Creating a serverless function (Node.js).
* Deploy pipeline (git push → auto build → site updates).

### Why

* Your **record\_lap.js** lives in Netlify.
* Keeps your Supabase service key hidden.

### Resources

* [Netlify Docs — Functions](https://docs.netlify.com/functions/overview/)
* [Netlify + Supabase tutorial](https://egghead.io/courses/build-an-app-with-supabase-and-netlify-functions)

---

## **Stage 7 — Advanced Frontend (Make It Professional)**

### What to Learn

* Responsive design (mobile-first).
* CSS transitions/animations.
* Better layouts with Grid/Flexbox.
* Adding logos/images dynamically.
* Testing & debugging in browser devtools.

### Why

* To make your site look like a real **F1 leaderboard app**.
* To handle both desktop and mobile users smoothly.

### Resources

* [CSS Tricks Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
* [TailwindCSS (optional)](https://tailwindcss.com/)

---

## **Stage 8 — Fullstack Practice & Deployment**

### What to Learn

* How frontend, backend, database all connect.
* Continuous Deployment (CD) with GitHub → Netlify.
* Building a new feature end-to-end:

  1. Add a table/column in Supabase.
  2. Update serverless function.
  3. Update frontend JS to fetch/use new data.

### Why

* This is how you’ll **grow your F1 app** into a full product.
* It’s also the skills you need for future freelancing / portfolio work.

### Resources

* [Fullstack Open (free course)](https://fullstackopen.com/en/) (pick relevant parts).
* [The Net Ninja Fullstack Playlist](https://www.youtube.com/@NetNinja)

---

# 🏁 How to Practice While Learning

* At **each stage**, come back to your F1 site and **apply the concept** immediately.
  Example:

  * Learn `SELECT`? → Go to Supabase and run one.
  * Learn `fetch()`? → Fetch drivers into `about.html`.
  * Learn Flexbox? → Fix the layout of your leaderboard.

* After you finish the whole roadmap, **delete the repo** and **rebuild the whole site from scratch** with no help → that’s how you’ll know you’ve really learned it.

---

👉 Chief, this roadmap will take you from **beginner (HTML/CSS basics)** to **fullstack dev who can build, host, and scale apps**.

Do you want me to now **break this into a weekly timetable** (like Week 1, Week 2, etc., with exact tasks tied to your F1 site), or do you prefer this as just a free roadmap to follow at your own pace?
